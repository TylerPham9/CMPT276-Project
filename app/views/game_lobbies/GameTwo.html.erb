<% provide(:title, 'Multiplayer') %>

<h1 align="center">Multiplayer</h1>
<style>
	#mainWrapper {
		margin: auto;
		height:700px;
		width:1600px;
		position: relative;
		
	}
	#Wrapper {
		margin:0 auto;
		height:500px;
		width:800px;
		position:relative;
	}
	#labels{
		text-align: center;
	}
	
</style>

<!--<script src="http://cdn.pubnub.com/pubnub.min.js"></script>-->

<!--<script type="text/javascript" src=http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js></script>-->

<div id="labels">
	<section id="main">
		<section id="colorSwatch">
			<input type="radio" name="color" id="color01" data-color="black" checked><label for="color01">BLACK</label> 
			<input type="radio" name="color" id="color02" data-color="blue">		<label for="color02">BLUE</label>  
			<input type="radio" name="color" id="color03" data-color="red">	<label for="color03">RED</label>  
			<input type="radio" name="color" id="color04" data-color="white">	<label for="color04">ERASER</label>  
		</section>
		Currently Online: <span id="occupancy">0</span>
	</section>
</div>	
	
	

<div style="margin-left:0px;padding:0px 0px;height:100%;width:800px">
	<div id="wrapper2" >

		<canvas id="drawCanvas" width="100%" height="300%" style= "float:left; border: 1px solid black"  >DrawParty is not supported on this browser!</canvas>

		<script src="drawingcanvas.js"></script>

	</div>
</div>
	<script>
		(function() {

	var drawHistory = true;
	var canvas = document.getElementById('drawCanvas');
	var ctx = canvas.getContext('2d');
	var color = document.querySelector(':checked').getAttribute('data-color');

	canvas.width = 800;
	canvas.height = 500;

	 
	ctx.strokeStyle = color;
	ctx.lineWidth = '5';
	ctx.lineCap = ctx.lineJoin = 'round';
	
	document.getElementById('colorSwatch').addEventListener('click', function() {
		color = document.querySelector(':checked').getAttribute('data-color');
	}, false);
	
	var isTouchSupported = 'ontouchstart' in window;
	var isPointerSupported = navigator.pointerEnabled;
	var isMSPointerSupported =  navigator.msPointerEnabled;
	
	var downEvent = isTouchSupported ? 'touchstart' : (isPointerSupported ? 'pointerdown' : (isMSPointerSupported ? 'MSPointerDown' : 'mousedown'));
	var moveEvent = isTouchSupported ? 'touchmove' : (isPointerSupported ? 'pointermove' : (isMSPointerSupported ? 'MSPointerMove' : 'mousemove'));
	var upEvent = isTouchSupported ? 'touchend' : (isPointerSupported ? 'pointerup' : (isMSPointerSupported ? 'MSPointerUp' : 'mouseup'));
	 	  
	canvas.addEventListener(downEvent, startDraw, false);
	canvas.addEventListener(moveEvent, draw, false);
	canvas.addEventListener(upEvent, endDraw, false);

	var channel = 'draw2';

	var pubnub = PUBNUB.init({
		publish_key     : 'pub-c-c4d33e71-7da1-4133-9d09-a62c79570aa9',
		subscribe_key   : 'sub-c-fb6688c2-3e22-11e6-9236-02ee2ddab7fe',
		leave_on_unload : true,
		ssl		: document.location.protocol === "https:"
	});

	pubnub.subscribe({
		channel: channel,
		callback: drawFromStream,
		presence: function(m){

   			document.getElementById('occupancy').textContent = m.occupancy;
   			var p = document.getElementById('occupancy').parentNode;
   		}
	});

	function publish(data) {
		pubnub.publish({
			channel: channel,
			message: data
		});
     }


    function drawOnCanvas(color, plots) {
    	ctx.strokeStyle = color;
		ctx.beginPath();
		ctx.moveTo(plots[0].x, plots[0].y);

    	for(var i=1; i<plots.length; i++) {
	    	ctx.lineTo(plots[i].x, plots[i].y);
	    }
	    ctx.stroke();
    }

    function drawFromStream(message) {
		if(!message || message.plots.length < 1) return;
		drawOnCanvas(message.color, message.plots);
    }
    

    if(drawHistory) {
	    pubnub.history({
	    	channel  : channel,
	    	count    : 25,
	    	callback : function(messages) {
	    		pubnub.each( messages[0], drawFromStream );
	    	}
	    });
	}
    var isActive = false;
    var plots = [];

	function draw(e) {
		e.preventDefault(); 
	  	if(!isActive) return;

    	var x = isTouchSupported ? (e.targetTouches[0].pageX - canvas.offsetLeft) : (e.offsetX || e.layerX - canvas.offsetLeft);
    	var y = isTouchSupported ? (e.targetTouches[0].pageY - canvas.offsetTop) : (e.offsetY || e.layerY - canvas.offsetTop);

    	plots.push({x: (x << 0), y: (y << 0)}); 

    	drawOnCanvas(color, plots);
	}
	
	function startDraw(e) {
	  	e.preventDefault();
	  	isActive = true;
	}
	
	function endDraw(e) {
	  	e.preventDefault();
	  	isActive = false;
	  
	  	publish({
	  		color: color,
	  		plots: plots
	  	});

	  	plots = [];
	}
})();

		
	</script>
	
	
	


	





<style>
#chat-output {
  
  width: 100%;
  overflow-y: scroll;
}
.list-group{
  height: 300px;
  
  overflow-y: scroll;
}
</style>

<div class="container-fluid">
  <div class="row">
    <div class="col-md-6" style="float:right; width:25%" >
      <div class="panel panel-default" >
        <div class="panel-heading">Online Users</div>
        <div class="list-group" id="online-users" style="height: 500px"></div>
      </div>
    </div>
    <div class="col-md-6" style="width:100%">
      <div class="panel panel-default" style="height:100%">
        <div class="panel-heading">Live Chat</div>
  <ul class="list-group" id="chat-output"></ul>
  <div class="panel-body">
    <form id="chat">
      <div class="input-group">
        <input type="text" class="form-control" id="chat-input"/>
        <span class="input-group-btn">
          <button type="submit" class="btn btn-default">Send Message</button>
          <input type='text' class="basic"/>
          
        </span>
      </div>
    </form>
  </div>
</div>

      </div>
    </div>
  </div>
<input id="basic-log" type="hidden" value="#000000" />

<script type="text/javascript">

var $input = $('#chat-input'); 
var $output = $('#chat-output');
var channel = 'Game3';
var user = "<%= current_user.username%>";

var pubnub2 = PUBNUB.init({
	 publish_key: 'pub-c-39594782-c4b0-4fb3-80fe-74e262353bf6',
	 subscribe_key: 'sub-c-7ae61028-e9dd-11e3-92e7-02ee2ddab7fe',
	 uuid: user,
	 heartbeat: 10,
});

$(".basic").spectrum({
    change: function(color) {
  $("#basic-log").val(color.toHexString()); //setting hidden input to color to grab later
  document.getElementById("chat-input").setAttribute("style", "color:" + color.toHexString()); //setting input color
    }
});


$('#chat').submit(function() {
  pubnub2.publish({
    channel: channel,
    message: {
      text: $input.val() + "|" + $('#basic-log').val(), //must send code for color to be parsed by other client  (adding | at end of string eliminates color)
      username: user
    }
    
  });
  $input.val('');
  return false;
});

$('#log-out').on("click", function(){
  console.log('clicked log-out');
  pubnub2.unsubscribe({
    channel: channel
  });
  
});

pubnub2.subscribe({
  channel: channel, 
  message: function(data) { 
  
    var color = (data.text).split("|")[1];
    var userMessage = (data.text).split("|")[0];
    
    var $line = $('<li class="list-group-item"><strong>' + data.username + ': </strong> ');
    var $message = $('<span class="text" name="' + color + '">' + userMessage + '</span>');


    $line.append($message);
    $output.append($line);
   
    var array =  document.getElementsByName(color);
    array[array.length - 1].setAttribute("style", "color:" + color);
    $output.scrollTop($output[0].scrollHeight);
  },
  
  presence: function(data) {
    console.log(data);
    
    if(data.action == "join")
    {
       var $new_user = $('<li id="' + data.uuid + '"class="list-group-item">' + data.uuid + '</li>')
       $('#online-users').append($new_user);
    }
    
    if(data.action == "leave" || data.action == "timeout") 
    {
        $('#' + data.uuid).remove();
    }
  }
});
</script>
 